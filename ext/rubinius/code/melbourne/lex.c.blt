/* C code produced by gperf version 3.0.4 */
/* Command-line: gperf -C -p -j1 -i 1 -g -o -t -N rb_reserved_word -k'1,3,$' defs/keywords  */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif

struct kwtable {const char* name; int id[2]; enum lex_state_e state;};
const struct kwtable *rb_reserved_word(const char *, unsigned int);
static const struct kwtable *reserved_word(const char *, unsigned int);
#define rb_reserved_word(str, len) reserved_word(str, len)
struct kwtable;

#define TOTAL_KEYWORDS 44
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 12
#define MIN_HASH_VALUE 7
#define MAX_HASH_VALUE 50
/* maximum key range = 44, duplicates = 0 */

static inline unsigned int hash(const char* str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 30, 51, 51, 15, 51, 18, 10,
      12, 14, 51, 51, 51, 51, 11, 51, 14, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 12, 51,  6,  4, 35,
      11,  1,  1, 29, 51, 27, 51,  3,  4, 20,
       4, 10, 16, 51, 12,  1,  5,  8, 51, 12,
      19, 18, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
      51, 51, 51, 51, 51, 51
    };
  int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[2]];
      /*FALLTHROUGH*/
      case 2:
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval + asso_values[(unsigned char)str[len - 1]];
}

const struct kwtable* rb_reserved_word(const char* str, unsigned int len)
{
  static const struct kwtable wordlist[] =
    {
      {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"else", {keyword_else, keyword_else}, EXPR_BEG},
      {"elsif", {keyword_elsif, keyword_elsif}, EXPR_VALUE},
      {"ensure", {keyword_ensure, keyword_ensure}, EXPR_BEG},
      {"self", {keyword_self, keyword_self}, EXPR_END},
      {"false", {keyword_false, keyword_false}, EXPR_END},
      {"fun", {keyword_fun, keyword_fun}, EXPR_FNAME},
      {"break", {keyword_break, keyword_break}, EXPR_MID},
      {"then", {keyword_then, keyword_then}, EXPR_BEG},
      {"nil", {keyword_nil, keyword_nil}, EXPR_END},
      {"def", {keyword_def, keyword_def}, EXPR_FNAME},
      {"not", {keyword_not, keyword_not}, EXPR_ARG},
      {"true", {keyword_true, keyword_true}, EXPR_END},
      {"unless", {keyword_unless, modifier_unless}, EXPR_VALUE},
      {"rescue", {keyword_rescue, modifier_rescue}, EXPR_MID},
      {"when", {keyword_when, keyword_when}, EXPR_VALUE},
      {"until", {keyword_until, modifier_until}, EXPR_VALUE},
      {"do", {keyword_do, keyword_do}, EXPR_BEG},
      {"or", {keyword_or, keyword_or}, EXPR_VALUE},
      {"undef", {keyword_undef, keyword_undef}, EXPR_FNAME},
      {"end", {keyword_end, keyword_end}, EXPR_END},
      {"return", {keyword_return, keyword_return}, EXPR_MID},
      {"for", {keyword_for, keyword_for}, EXPR_VALUE},
      {"funm", {keyword_funm, keyword_funm}, EXPR_FNAME},
      {"if", {keyword_if, modifier_if}, EXPR_VALUE},
      {"and", {keyword_and, keyword_and}, EXPR_VALUE},
      {"next", {keyword_next, keyword_next}, EXPR_MID},
      {"in", {keyword_in, keyword_in}, EXPR_VALUE},
      {"super", {keyword_super, keyword_super}, EXPR_ARG},
      {"yield", {keyword_yield, keyword_yield}, EXPR_ARG},
      {"defm", {keyword_defm, keyword_defm}, EXPR_FNAME},
      {"redo", {keyword_redo, keyword_redo}, EXPR_END},
      {"module", {keyword_module, keyword_module}, EXPR_VALUE},
      {"alias", {keyword_alias, keyword_alias}, EXPR_FNAME},
      {"retry", {keyword_retry, keyword_retry}, EXPR_END},
      {"case", {keyword_case, keyword_case}, EXPR_VALUE},
      {"begin", {keyword_begin, keyword_begin}, EXPR_BEG},
      {"__LINE__", {keyword__LINE__, keyword__LINE__}, EXPR_END},
      {"__FILE__", {keyword__FILE__, keyword__FILE__}, EXPR_END},
      {"while", {keyword_while, modifier_while}, EXPR_VALUE},
      {"__ENCODING__", {keyword__ENCODING__, keyword__ENCODING__}, EXPR_END},
      {"class", {keyword_class, keyword_class}, EXPR_CLASS},
      {"BEGIN", {keyword_BEGIN, keyword_BEGIN}, EXPR_END},
      {"END", {keyword_END, keyword_END}, EXPR_END},
      {"defined?", {keyword_defined, keyword_defined}, EXPR_ARG}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
    int key = hash(str, len);

    if(key <= MAX_HASH_VALUE && key >= 0) {
      const char *s = wordlist[key].name;

      if(*str == *s && !strcmp (str + 1, s + 1))
        return &wordlist[key];
    }
  }
  return 0;
}
